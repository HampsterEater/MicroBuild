/*
MicroBuild
Copyright (C) 2016 TwinDrills

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// ---------------------------------------------------------------------------
// General use enums.
// ---------------------------------------------------------------------------
START_ENUM(EOutputType)
	ENUM_KEY(ConsoleApp)
	ENUM_KEY(Executable)
	ENUM_KEY(StaticLib)
	ENUM_KEY(DynamicLib)
END_ENUM()

START_ENUM(ELanguage)
	ENUM_KEY(Cpp)
	ENUM_KEY(CSharp)
END_ENUM()

// ---------------------------------------------------------------------------
// Project
// ---------------------------------------------------------------------------
START_OPTION(
	std::string,
	Project,
	Name,
	"Name of project, used for output file and workspace descriptions."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	Group,
	"Location in the workspace file of this project, allows nesting of projects "
	"within workspaces that support it. Can be multiple layers deep, delimate "
	"as per a normal path, eg: ThirdParty/Libraries"
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Project,
	ShouldBuild,
	"Determines if the project should be built, use in conjunction with if "
	"statements to disable building projects in different configurations."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	Location,
	"Output folder that project files are generated in."
)
OPTION_RULE_REQUIRED()
OPTION_RULE_ABSOLUTE_PATH()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	EOutputType,
	Project,
	OutputType,
	"Defines the type of output generated by building the project."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	OutputDirectory,
	"Directory that build artifacts are output to."
)
OPTION_RULE_REQUIRED()
OPTION_RULE_ABSOLUTE_PATH()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	ELanguage,
	Project,
	Language,
	"Language this project is written in. Determines compiler to use."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	Directory,
	"Automatically defined to the directory the project file is contained in."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	File,
	"Automatically defined to the path to the project file."
)
END_OPTION()

// ---------------------------------------------------------------------------
// Dependencies
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	std::string,
	Dependencies,
	Dependency,
	"Name of projects this project is dependent on, they will be built before "
	"this project is built."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Files
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	Platform::Path,
	Files,
	File,
	"Location of files to include in project. Can contain wildcards (*) "
	"and recursive wildcards (**)."
)
OPTION_RULE_REQUIRED()
OPTION_RULE_EXPAND_PATH_WILDCARDS(true)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Linker
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Compiler
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Dependencies
// ---------------------------------------------------------------------------
